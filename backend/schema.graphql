interface Node {
  id: ID!
}

type Player implements Node {
  id: ID!
  name: String!
  games: [Game!]!
  answers: [PlayerAnswer!]!
}

type Question implements Node {
  id: ID!
  question: String!
  answers: [String!]!
  correctAnswer: String!
  games: [Game!]!
}

enum GameState {
  WaitingForPlayers
  Started
  Completed
}

type PlayerAnswer implements Node {
  id: ID!
  answer: String!
  player: Player!
  game: Game!
  question: Question
}

type Game implements Node {
  id: ID!
  state: GameState!
  questions: [Question!]!
  players: [Player!]!
  answers: [PlayerAnswer!]!
}

type Query {
  game(id: ID!): Game
  games: [Game!]!
}

input SubmittedAnswer {
  gameId: ID!
  playerId: ID!
  answer: String!
  questionId: ID!
}

type Mutation {
  createGame: Game!
  addPlayerToGame(gameId: ID!, playerName: String!): Game
  submitAnswer(answer: SubmittedAnswer!): Game
  startGame(gameId: ID!): Game
  endGame(gameId: ID!): Game
}
